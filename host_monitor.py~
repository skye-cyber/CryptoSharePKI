import os
import platform
import subprocess
import time
from datetime import datetime, timedelta

# Your existing function for CSR generation and submission
from AutoCertsGen import send_csr

HOST_NAME = platform.node()
# Adjust based on your environment
CERT_PATH = f"/etc/ssl/certs/{HOST_NAME}.crt"
RENEWAL_THRESHOLD_DAYS = 30  # Renew 30 days before expiration


def get_certificate_expiry(cert_path):
    """
    Returns the expiration date of the certificate in cert_path.
    """
    result = subprocess.run(
        ["openssl", "x509", "-enddate", "-noout", "-in", cert_path],
        capture_output=True,
        text=True,
        check=True
    )
    expiry_date_str = result.stdout.strip().split("=")[1]
    expiry_date = datetime.strptime(expiry_date_str, "%b %d %H:%M:%S %Y %Z")
    return expiry_date


def monitor_certificate():
    """
    Monitors the host certificate and triggers renewal if close to expiration.
    """
    while True:
        try:
            expiry_date = get_certificate_expiry(CERT_PATH)
            remaining_days = (expiry_date - datetime.utcnow()).days
            print(f"Certificate expires in {remaining_days} days.")

            if remaining_days <= RENEWAL_THRESHOLD_DAYS:
                print("Certificate is about to expire. Initiating renewal process...")
                send_csr()  # Trigger the CSR process
            else:
                print("Certificate is still valid. Monitoring...")

            # Sleep for a day before the next check
            time.sleep(86400)

        except Exception as e:
            print(f"Error while monitoring certificate: {e}")
            time.sleep(60)  # Retry after 1 minute on failure


if __name__ == "__main__":
    print("===Monitoring {HOST_NAME} certificate===")
    monitor_certificate()
